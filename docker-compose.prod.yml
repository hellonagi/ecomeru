services:
  db:
    image: postgres:16
    environment:
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_DB}
    volumes:
      - db_data:/var/lib/postgresql/data
    ports:
      - '5432:5432'
    networks:
      - container-link
    restart: always

  back:
    container_name: back
    hostname: back-server
    build:
      context: ./back
      dockerfile: Dockerfile.prod
    command: bash -c "rm -f tmp/pids/server.pid && bundle exec rails s -e production -b '0.0.0.0'"
    volumes:
      - gem_data:/usr/local/bundle
    ports:
      - '3000:3000'
    depends_on:
      - db
    env_file:
      - .env
    environment:
      RAILS_ENV: production
      RAILS_LOG_TO_STDOUT: 'true'
      RAILS_MASTER_KEY: ${RAILS_MASTER_KEY}
    networks:
      - container-link
    restart: always

  front:
    container_name: front
    hostname: front-server
    build:
      context: ./front
      dockerfile: Dockerfile.prod
    command: pnpm start
    ports:
      - '3001:3001'
    depends_on:
      - back
    environment:
      BASE_URL: ${BASE_URL_PROD}
      RAILS_API_URL: ${RAILS_API_URL}
    networks:
      - container-link
    restart: always

  sidekiq:
    build:
      context: ./back
      dockerfile: Dockerfile.prod
    command: bundle exec sidekiq
    volumes:
      - gem_data:/usr/local/bundle
    depends_on:
      - redis
      - back
      - db
    environment:
      RAILS_ENV: production
      REDIS_URL: redis://redis:6379/0
      RAILS_MASTER_KEY: ${RAILS_MASTER_KEY}
      RAKUTEN_ID: ${RAKUTEN_ID}
      RAKUTEN_AFFILIATE: ${RAKUTEN_AFFILIATE}
    networks:
      - container-link
    restart: always

  redis:
    image: 'redis:latest'
    ports:
      - '6379:6379'
    networks:
      - container-link
    restart: always

  nginx:
    image: nginx:latest
    ports:
      - '80:80'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf
    depends_on:
      - front
      - back
    networks:
      - container-link
    restart: always

networks:
  container-link:
    driver: bridge

volumes:
  db_data:
  gem_data:
