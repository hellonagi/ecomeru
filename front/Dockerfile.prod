# Base image to install dependencies
FROM node:20-slim AS base
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
RUN corepack enable

# Install necessary tools using apt-get since it's a Debian-based image
RUN apt-get update && apt-get install -y --no-install-recommends bash curl \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /front

# Copy package.json and pnpm-lock.yaml for dependency installation
COPY package.json pnpm-lock.yaml ./

# Install only production dependencies in a separate stage
FROM base AS prod-deps
RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --prod --frozen-lockfile

# Install all dependencies for building in the build stage
FROM base AS build
RUN --mount=type=cache,id=pnpm,target=/pnpm/store pnpm install --frozen-lockfile
COPY . .
RUN pnpm run build

# Final image to run the app
FROM node:20-slim AS runner
ENV PNPM_HOME="/pnpm"
ENV PATH="$PNPM_HOME:$PATH"
RUN corepack enable

# Install necessary tools using apt-get
RUN apt-get update && apt-get install -y --no-install-recommends bash curl \
    && rm -rf /var/lib/apt/lists/*

# Set environment to production
ENV NODE_ENV=production

# Set working directory
WORKDIR /front

# Copy only necessary files for production
COPY --from=prod-deps /front/node_modules /front/node_modules
COPY --from=build /front/.next ./.next
COPY --from=build /front/public ./public
COPY --from=build /front/package.json ./package.json
COPY --from=build /front/pnpm-lock.yaml ./pnpm-lock.yaml

# Set environment variable to use port 3001
ENV PORT=3001

# Expose the port and define the command to run the app
EXPOSE 3001
CMD ["pnpm", "start"]
